// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	resources "github.com/ercling/google-ads-go/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocationViewServiceClient is the client API for LocationViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocationViewServiceClient interface {
	// Returns the requested location view in full detail.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	GetLocationView(ctx context.Context, in *GetLocationViewRequest, opts ...grpc.CallOption) (*resources.LocationView, error)
}

type locationViewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocationViewServiceClient(cc grpc.ClientConnInterface) LocationViewServiceClient {
	return &locationViewServiceClient{cc}
}

func (c *locationViewServiceClient) GetLocationView(ctx context.Context, in *GetLocationViewRequest, opts ...grpc.CallOption) (*resources.LocationView, error) {
	out := new(resources.LocationView)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.LocationViewService/GetLocationView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationViewServiceServer is the server API for LocationViewService service.
// All implementations must embed UnimplementedLocationViewServiceServer
// for forward compatibility
type LocationViewServiceServer interface {
	// Returns the requested location view in full detail.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	GetLocationView(context.Context, *GetLocationViewRequest) (*resources.LocationView, error)
	mustEmbedUnimplementedLocationViewServiceServer()
}

// UnimplementedLocationViewServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocationViewServiceServer struct {
}

func (UnimplementedLocationViewServiceServer) GetLocationView(context.Context, *GetLocationViewRequest) (*resources.LocationView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationView not implemented")
}
func (UnimplementedLocationViewServiceServer) mustEmbedUnimplementedLocationViewServiceServer() {}

// UnsafeLocationViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocationViewServiceServer will
// result in compilation errors.
type UnsafeLocationViewServiceServer interface {
	mustEmbedUnimplementedLocationViewServiceServer()
}

func RegisterLocationViewServiceServer(s grpc.ServiceRegistrar, srv LocationViewServiceServer) {
	s.RegisterService(&LocationViewService_ServiceDesc, srv)
}

func _LocationViewService_GetLocationView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocationViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationViewServiceServer).GetLocationView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.LocationViewService/GetLocationView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationViewServiceServer).GetLocationView(ctx, req.(*GetLocationViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LocationViewService_ServiceDesc is the grpc.ServiceDesc for LocationViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocationViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.googleads.v7.services.LocationViewService",
	HandlerType: (*LocationViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocationView",
			Handler:    _LocationViewService_GetLocationView_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/googleads/v7/services/location_view_service.proto",
}
