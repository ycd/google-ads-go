// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	resources "github.com/ercling/google-ads-go/resources"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CampaignCriterionSimulationServiceClient is the client API for CampaignCriterionSimulationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignCriterionSimulationServiceClient interface {
	// Returns the requested campaign criterion simulation in full detail.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	GetCampaignCriterionSimulation(ctx context.Context, in *GetCampaignCriterionSimulationRequest, opts ...grpc.CallOption) (*resources.CampaignCriterionSimulation, error)
}

type campaignCriterionSimulationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignCriterionSimulationServiceClient(cc grpc.ClientConnInterface) CampaignCriterionSimulationServiceClient {
	return &campaignCriterionSimulationServiceClient{cc}
}

func (c *campaignCriterionSimulationServiceClient) GetCampaignCriterionSimulation(ctx context.Context, in *GetCampaignCriterionSimulationRequest, opts ...grpc.CallOption) (*resources.CampaignCriterionSimulation, error) {
	out := new(resources.CampaignCriterionSimulation)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignCriterionSimulationService/GetCampaignCriterionSimulation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignCriterionSimulationServiceServer is the server API for CampaignCriterionSimulationService service.
// All implementations must embed UnimplementedCampaignCriterionSimulationServiceServer
// for forward compatibility
type CampaignCriterionSimulationServiceServer interface {
	// Returns the requested campaign criterion simulation in full detail.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	GetCampaignCriterionSimulation(context.Context, *GetCampaignCriterionSimulationRequest) (*resources.CampaignCriterionSimulation, error)
	mustEmbedUnimplementedCampaignCriterionSimulationServiceServer()
}

// UnimplementedCampaignCriterionSimulationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCampaignCriterionSimulationServiceServer struct {
}

func (UnimplementedCampaignCriterionSimulationServiceServer) GetCampaignCriterionSimulation(context.Context, *GetCampaignCriterionSimulationRequest) (*resources.CampaignCriterionSimulation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignCriterionSimulation not implemented")
}
func (UnimplementedCampaignCriterionSimulationServiceServer) mustEmbedUnimplementedCampaignCriterionSimulationServiceServer() {
}

// UnsafeCampaignCriterionSimulationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignCriterionSimulationServiceServer will
// result in compilation errors.
type UnsafeCampaignCriterionSimulationServiceServer interface {
	mustEmbedUnimplementedCampaignCriterionSimulationServiceServer()
}

func RegisterCampaignCriterionSimulationServiceServer(s grpc.ServiceRegistrar, srv CampaignCriterionSimulationServiceServer) {
	s.RegisterService(&CampaignCriterionSimulationService_ServiceDesc, srv)
}

func _CampaignCriterionSimulationService_GetCampaignCriterionSimulation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignCriterionSimulationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignCriterionSimulationServiceServer).GetCampaignCriterionSimulation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignCriterionSimulationService/GetCampaignCriterionSimulation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignCriterionSimulationServiceServer).GetCampaignCriterionSimulation(ctx, req.(*GetCampaignCriterionSimulationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignCriterionSimulationService_ServiceDesc is the grpc.ServiceDesc for CampaignCriterionSimulationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignCriterionSimulationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.googleads.v7.services.CampaignCriterionSimulationService",
	HandlerType: (*CampaignCriterionSimulationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampaignCriterionSimulation",
			Handler:    _CampaignCriterionSimulationService_GetCampaignCriterionSimulation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/googleads/v7/services/campaign_criterion_simulation_service.proto",
}
