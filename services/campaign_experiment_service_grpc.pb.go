// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package services

import (
	context "context"
	resources "github.com/ycd/google-ads-go/resources"
	longrunning "google.golang.org/genproto/googleapis/longrunning"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CampaignExperimentServiceClient is the client API for CampaignExperimentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CampaignExperimentServiceClient interface {
	// Returns the requested campaign experiment in full detail.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	GetCampaignExperiment(ctx context.Context, in *GetCampaignExperimentRequest, opts ...grpc.CallOption) (*resources.CampaignExperiment, error)
	// Creates a campaign experiment based on a campaign draft. The draft campaign
	// will be forked into a real campaign (called the experiment campaign) that
	// will begin serving ads if successfully created.
	//
	// The campaign experiment is created immediately with status INITIALIZING.
	// This method return a long running operation that tracks the forking of the
	// draft campaign. If the forking fails, a list of errors can be retrieved
	// using the ListCampaignExperimentAsyncErrors method. The operation's
	// metadata will be a StringValue containing the resource name of the created
	// campaign experiment.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [DatabaseError]()
	//   [DateError]()
	//   [DateRangeError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RangeError]()
	//   [RequestError]()
	CreateCampaignExperiment(ctx context.Context, in *CreateCampaignExperimentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Updates campaign experiments. Operation statuses are returned.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	MutateCampaignExperiments(ctx context.Context, in *MutateCampaignExperimentsRequest, opts ...grpc.CallOption) (*MutateCampaignExperimentsResponse, error)
	// Graduates a campaign experiment to a full campaign. The base and experiment
	// campaigns will start running independently with their own budgets.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	GraduateCampaignExperiment(ctx context.Context, in *GraduateCampaignExperimentRequest, opts ...grpc.CallOption) (*GraduateCampaignExperimentResponse, error)
	// Promotes the changes in a experiment campaign back to the base campaign.
	//
	// The campaign experiment is updated immediately with status PROMOTING.
	// This method return a long running operation that tracks the promoting of
	// the experiment campaign. If the promoting fails, a list of errors can be
	// retrieved using the ListCampaignExperimentAsyncErrors method.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	PromoteCampaignExperiment(ctx context.Context, in *PromoteCampaignExperimentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error)
	// Immediately ends a campaign experiment, changing the experiment's scheduled
	// end date and without waiting for end of day. End date is updated to be the
	// time of the request.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	EndCampaignExperiment(ctx context.Context, in *EndCampaignExperimentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Returns all errors that occurred during CampaignExperiment create or
	// promote (whichever occurred last).
	// Supports standard list paging.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	ListCampaignExperimentAsyncErrors(ctx context.Context, in *ListCampaignExperimentAsyncErrorsRequest, opts ...grpc.CallOption) (*ListCampaignExperimentAsyncErrorsResponse, error)
}

type campaignExperimentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCampaignExperimentServiceClient(cc grpc.ClientConnInterface) CampaignExperimentServiceClient {
	return &campaignExperimentServiceClient{cc}
}

func (c *campaignExperimentServiceClient) GetCampaignExperiment(ctx context.Context, in *GetCampaignExperimentRequest, opts ...grpc.CallOption) (*resources.CampaignExperiment, error) {
	out := new(resources.CampaignExperiment)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignExperimentService/GetCampaignExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignExperimentServiceClient) CreateCampaignExperiment(ctx context.Context, in *CreateCampaignExperimentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignExperimentService/CreateCampaignExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignExperimentServiceClient) MutateCampaignExperiments(ctx context.Context, in *MutateCampaignExperimentsRequest, opts ...grpc.CallOption) (*MutateCampaignExperimentsResponse, error) {
	out := new(MutateCampaignExperimentsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignExperimentService/MutateCampaignExperiments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignExperimentServiceClient) GraduateCampaignExperiment(ctx context.Context, in *GraduateCampaignExperimentRequest, opts ...grpc.CallOption) (*GraduateCampaignExperimentResponse, error) {
	out := new(GraduateCampaignExperimentResponse)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignExperimentService/GraduateCampaignExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignExperimentServiceClient) PromoteCampaignExperiment(ctx context.Context, in *PromoteCampaignExperimentRequest, opts ...grpc.CallOption) (*longrunning.Operation, error) {
	out := new(longrunning.Operation)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignExperimentService/PromoteCampaignExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignExperimentServiceClient) EndCampaignExperiment(ctx context.Context, in *EndCampaignExperimentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignExperimentService/EndCampaignExperiment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *campaignExperimentServiceClient) ListCampaignExperimentAsyncErrors(ctx context.Context, in *ListCampaignExperimentAsyncErrorsRequest, opts ...grpc.CallOption) (*ListCampaignExperimentAsyncErrorsResponse, error) {
	out := new(ListCampaignExperimentAsyncErrorsResponse)
	err := c.cc.Invoke(ctx, "/google.ads.googleads.v7.services.CampaignExperimentService/ListCampaignExperimentAsyncErrors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CampaignExperimentServiceServer is the server API for CampaignExperimentService service.
// All implementations must embed UnimplementedCampaignExperimentServiceServer
// for forward compatibility
type CampaignExperimentServiceServer interface {
	// Returns the requested campaign experiment in full detail.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	GetCampaignExperiment(context.Context, *GetCampaignExperimentRequest) (*resources.CampaignExperiment, error)
	// Creates a campaign experiment based on a campaign draft. The draft campaign
	// will be forked into a real campaign (called the experiment campaign) that
	// will begin serving ads if successfully created.
	//
	// The campaign experiment is created immediately with status INITIALIZING.
	// This method return a long running operation that tracks the forking of the
	// draft campaign. If the forking fails, a list of errors can be retrieved
	// using the ListCampaignExperimentAsyncErrors method. The operation's
	// metadata will be a StringValue containing the resource name of the created
	// campaign experiment.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [DatabaseError]()
	//   [DateError]()
	//   [DateRangeError]()
	//   [FieldError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RangeError]()
	//   [RequestError]()
	CreateCampaignExperiment(context.Context, *CreateCampaignExperimentRequest) (*longrunning.Operation, error)
	// Updates campaign experiments. Operation statuses are returned.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	MutateCampaignExperiments(context.Context, *MutateCampaignExperimentsRequest) (*MutateCampaignExperimentsResponse, error)
	// Graduates a campaign experiment to a full campaign. The base and experiment
	// campaigns will start running independently with their own budgets.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [MutateError]()
	//   [QuotaError]()
	//   [RequestError]()
	GraduateCampaignExperiment(context.Context, *GraduateCampaignExperimentRequest) (*GraduateCampaignExperimentResponse, error)
	// Promotes the changes in a experiment campaign back to the base campaign.
	//
	// The campaign experiment is updated immediately with status PROMOTING.
	// This method return a long running operation that tracks the promoting of
	// the experiment campaign. If the promoting fails, a list of errors can be
	// retrieved using the ListCampaignExperimentAsyncErrors method.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	PromoteCampaignExperiment(context.Context, *PromoteCampaignExperimentRequest) (*longrunning.Operation, error)
	// Immediately ends a campaign experiment, changing the experiment's scheduled
	// end date and without waiting for end of day. End date is updated to be the
	// time of the request.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [CampaignExperimentError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	EndCampaignExperiment(context.Context, *EndCampaignExperimentRequest) (*emptypb.Empty, error)
	// Returns all errors that occurred during CampaignExperiment create or
	// promote (whichever occurred last).
	// Supports standard list paging.
	//
	// List of thrown errors:
	//   [AuthenticationError]()
	//   [AuthorizationError]()
	//   [HeaderError]()
	//   [InternalError]()
	//   [QuotaError]()
	//   [RequestError]()
	ListCampaignExperimentAsyncErrors(context.Context, *ListCampaignExperimentAsyncErrorsRequest) (*ListCampaignExperimentAsyncErrorsResponse, error)
	mustEmbedUnimplementedCampaignExperimentServiceServer()
}

// UnimplementedCampaignExperimentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCampaignExperimentServiceServer struct {
}

func (UnimplementedCampaignExperimentServiceServer) GetCampaignExperiment(context.Context, *GetCampaignExperimentRequest) (*resources.CampaignExperiment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCampaignExperiment not implemented")
}
func (UnimplementedCampaignExperimentServiceServer) CreateCampaignExperiment(context.Context, *CreateCampaignExperimentRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCampaignExperiment not implemented")
}
func (UnimplementedCampaignExperimentServiceServer) MutateCampaignExperiments(context.Context, *MutateCampaignExperimentsRequest) (*MutateCampaignExperimentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MutateCampaignExperiments not implemented")
}
func (UnimplementedCampaignExperimentServiceServer) GraduateCampaignExperiment(context.Context, *GraduateCampaignExperimentRequest) (*GraduateCampaignExperimentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GraduateCampaignExperiment not implemented")
}
func (UnimplementedCampaignExperimentServiceServer) PromoteCampaignExperiment(context.Context, *PromoteCampaignExperimentRequest) (*longrunning.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PromoteCampaignExperiment not implemented")
}
func (UnimplementedCampaignExperimentServiceServer) EndCampaignExperiment(context.Context, *EndCampaignExperimentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndCampaignExperiment not implemented")
}
func (UnimplementedCampaignExperimentServiceServer) ListCampaignExperimentAsyncErrors(context.Context, *ListCampaignExperimentAsyncErrorsRequest) (*ListCampaignExperimentAsyncErrorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCampaignExperimentAsyncErrors not implemented")
}
func (UnimplementedCampaignExperimentServiceServer) mustEmbedUnimplementedCampaignExperimentServiceServer() {
}

// UnsafeCampaignExperimentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CampaignExperimentServiceServer will
// result in compilation errors.
type UnsafeCampaignExperimentServiceServer interface {
	mustEmbedUnimplementedCampaignExperimentServiceServer()
}

func RegisterCampaignExperimentServiceServer(s grpc.ServiceRegistrar, srv CampaignExperimentServiceServer) {
	s.RegisterService(&CampaignExperimentService_ServiceDesc, srv)
}

func _CampaignExperimentService_GetCampaignExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCampaignExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignExperimentServiceServer).GetCampaignExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignExperimentService/GetCampaignExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignExperimentServiceServer).GetCampaignExperiment(ctx, req.(*GetCampaignExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignExperimentService_CreateCampaignExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCampaignExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignExperimentServiceServer).CreateCampaignExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignExperimentService/CreateCampaignExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignExperimentServiceServer).CreateCampaignExperiment(ctx, req.(*CreateCampaignExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignExperimentService_MutateCampaignExperiments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MutateCampaignExperimentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignExperimentServiceServer).MutateCampaignExperiments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignExperimentService/MutateCampaignExperiments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignExperimentServiceServer).MutateCampaignExperiments(ctx, req.(*MutateCampaignExperimentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignExperimentService_GraduateCampaignExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GraduateCampaignExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignExperimentServiceServer).GraduateCampaignExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignExperimentService/GraduateCampaignExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignExperimentServiceServer).GraduateCampaignExperiment(ctx, req.(*GraduateCampaignExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignExperimentService_PromoteCampaignExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromoteCampaignExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignExperimentServiceServer).PromoteCampaignExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignExperimentService/PromoteCampaignExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignExperimentServiceServer).PromoteCampaignExperiment(ctx, req.(*PromoteCampaignExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignExperimentService_EndCampaignExperiment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndCampaignExperimentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignExperimentServiceServer).EndCampaignExperiment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignExperimentService/EndCampaignExperiment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignExperimentServiceServer).EndCampaignExperiment(ctx, req.(*EndCampaignExperimentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CampaignExperimentService_ListCampaignExperimentAsyncErrors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCampaignExperimentAsyncErrorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CampaignExperimentServiceServer).ListCampaignExperimentAsyncErrors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.ads.googleads.v7.services.CampaignExperimentService/ListCampaignExperimentAsyncErrors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CampaignExperimentServiceServer).ListCampaignExperimentAsyncErrors(ctx, req.(*ListCampaignExperimentAsyncErrorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CampaignExperimentService_ServiceDesc is the grpc.ServiceDesc for CampaignExperimentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CampaignExperimentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.ads.googleads.v7.services.CampaignExperimentService",
	HandlerType: (*CampaignExperimentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCampaignExperiment",
			Handler:    _CampaignExperimentService_GetCampaignExperiment_Handler,
		},
		{
			MethodName: "CreateCampaignExperiment",
			Handler:    _CampaignExperimentService_CreateCampaignExperiment_Handler,
		},
		{
			MethodName: "MutateCampaignExperiments",
			Handler:    _CampaignExperimentService_MutateCampaignExperiments_Handler,
		},
		{
			MethodName: "GraduateCampaignExperiment",
			Handler:    _CampaignExperimentService_GraduateCampaignExperiment_Handler,
		},
		{
			MethodName: "PromoteCampaignExperiment",
			Handler:    _CampaignExperimentService_PromoteCampaignExperiment_Handler,
		},
		{
			MethodName: "EndCampaignExperiment",
			Handler:    _CampaignExperimentService_EndCampaignExperiment_Handler,
		},
		{
			MethodName: "ListCampaignExperimentAsyncErrors",
			Handler:    _CampaignExperimentService_ListCampaignExperimentAsyncErrors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "google/ads/googleads/v7/services/campaign_experiment_service.proto",
}
